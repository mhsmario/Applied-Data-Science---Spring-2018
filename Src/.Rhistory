table(all_test$GarageCars)
all_test$GarageArea[is.na(all_test$GarageArea)] <- 'No Garage'
table(all_test$GarageArea)
all_test$GarageQual <- addLevel(all_test$GarageQual, "None")
all_test$GarageQual <- ifelse(is.na(all_test$GarageQual), "None", paste(all_test$GarageQual))
all_test$GarageQual <- as.factor(all_test$GarageQual)
table(all_test$GarageQual)
all_test$GarageCond <- addLevel(all_test$GarageCond, "None")
all_test$GarageCond <- ifelse(is.na(all_test$GarageCond), "None", paste(all_test$GarageCond))
all_test$GarageCond <- as.factor(all_test$GarageCond)
table(all_test$GarageCond)
#BsmtExposure: Refers to walkout or garden level walls (**smae for BsmtFinType1/BsmtFinSF1/BsmtFinType2/BsmtFinSF2/BsmtUnfSF/BsmtQual)
all_test$BsmtQual <- addLevel(all_test$BsmtQual, "None")
all_test$BsmtQual <- ifelse(is.na(all_test$BsmtQual), "None", paste(all_test$BsmtQual))
all_test$BsmtQual <- as.factor(all_test$BsmtQual)
table(all_test$BsmtQual)
all_test$BsmtExposure <- addLevel(all_test$BsmtExposure, "None")
all_test$BsmtExposure <- ifelse(is.na(all_test$BsmtExposure), "None", paste(all_test$BsmtExposure))
all_test$BsmtExposure <- as.factor(all_test$BsmtExposure)
table(all_test$BsmtExposure)
all_test$BsmtFinType1 <- addLevel(all_test$BsmtFinType1, "None")
all_test$BsmtFinType1 <- ifelse(is.na(all_test$BsmtFinType1), "None", paste(all_test$BsmtFinType1))
all_test$BsmtFinType1 <- as.factor(all_test$BsmtFinType1)
str(all_test$BsmtFinType1)
all_test$BsmtCond <- addLevel(all_test$BsmtCond, "None")
all_test$BsmtCond <- ifelse(is.na(all_test$BsmtCond), "None", paste(all_test$BsmtCond))
all_test$BsmtCond <- as.factor(all_test$BsmtCond)
table(all_test$BsmtCond)
all_test$BsmtFinType2 <- addLevel(all_test$BsmtFinType2, "None")
all_test$BsmtFinType2 <- ifelse(is.na(all_test$BsmtFinType2), "None", paste(all_test$BsmtFinType2))
all_test$BsmtFinType2 <- as.factor(all_test$BsmtFinType2)
table(all_test$BsmtFinType2)
all_test$BsmtFinSF1[is.na(all_test$BsmtFinSF1)] <-0
all_test$BsmtFinSF2[is.na(all_test$BsmtFinSF2)] <-0
all_test$BsmtUnfSF[is.na(all_test$BsmtUnfSF)] <-0
all_test$LotFrontage[is.na(all_test$LotFrontage)] <-0
table(all_test$LotFrontage)
drop.na.columns <- c( "MasVnrType","LotFrontage")
all_test<- all_test[ , !(names(all_test) %in% drop.na.columns)]
all_test <- na.omit(all_test)
all <- all_test
all$Foundation <- as.factor(all$Foundation)
table(all$Foundation)
all$Heating <- as.factor(all$Heating)
all$RoofStyle <- as.factor(all$RoofStyle)
all$RoofMatl <- as.factor(all$RoofMatl)
all$LandContour <- as.factor(all$LandContour)
all$BldgType <- as.factor(all$BldgType)
all$HouseStyle <- as.factor(all$HouseStyle)
all$Condition1 <- as.factor(all$Condition1)
all$Condition2 <- as.factor(all$Condition2)
all$MoSold <- as.factor(all$MoSold)
all$MSSubClass <- as.factor(all$MSSubClass)
na_count_test <-sapply(all, function(y) sum(length(which(is.na(y)))))
na_count_test <- data.frame(na_count_test)
str(all)
write_excel_csv(all, "New_Data.csv")
# Neighborhood
train <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Src/New_Data.csv")
train <- na.omit(train)
df <- data.frame(tapply(train$SalePrice, train$Neighborhood, mean))
library(data.table)
setDT(df, keep.rownames = TRUE)[]
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) + geom_col(aes(fill = df$rn))
numericVars <- which(sapply(train, is.numeric)) #index vector numeric variables
factorVars <- which(sapply(train, is.factor)) #index vector factor variables
cat('There are', length(numericVars), 'numeric variables, and', length(factorVars), 'categoric variables')
set.seed(123)
rf <- randomForest(SalePrice ~ . - SalePrice, data = train, importance = TRUE)
all$GarageArea <- as.numeric(all$GarageArea)
str(all$GarageArea)
all <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Data/Raw//train.csv")
hist(all$SalePrice, breaks=seq(30000, 760000, 500),prob=TRUE )
lines(density(all$SalePrice), col="blue", lwd=2)
lines(density(all$SalePrice, adjust=2), lty="dotted")
summary(all$SalePrice)
# SalePrice does not have a standard normal distribution, it is right skewed
# Log the SalePrice, the distribution of log(SalePrice) looks like a normal distribution
log_saleprice <- log(all$SalePrice)
hist(log_saleprice, breaks=seq(10, 14, 0.025),prob=TRUE )
lines(density(log_saleprice), col="blue", lwd=2)
all$Id <- rownames(all)
numericVars <- which(sapply(all, is.numeric))
numericVarNames <- names(numericVars)
length(numericVars)
all_numVar <- all[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs") #correlations of all numeric variables
#sort on decreasing correlations with SalePrice
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
all_test <- all
levels(all_test$PoolQC)
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
all_test$PoolQC <- addLevel(all_test$PoolQC, "None")
all_test$PoolQC <- addLevel(all_test$PoolQC, "Po")
all_test$PoolQC <- addLevel(all_test$PoolQC, "TA")
all_test$PoolQC <- ifelse(is.na(all$PoolQC), "None", paste(all$PoolQC))
Qualities <- c('None' = 0, 'Po' = 1, 'Fa' = 2, 'TA' = 3, 'Gd' = 4, 'Ex' = 5)
all_test$PoolQC<- revalue(all_test$PoolQC, Qualities)
table(all_test$PoolQC)
all_test <- all
levels(all_test$PoolQC)
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
all_test$PoolQC <- addLevel(all_test$PoolQC, "None")
all_test$PoolQC <- addLevel(all_test$PoolQC, "Po")
all_test$PoolQC <- addLevel(all_test$PoolQC, "TA")
all_test$PoolQC <- ifelse(is.na(all$PoolQC), "None", paste(all$PoolQC))
Qualities <- c('None' = 0, 'Po' = 1, 'Fa' = 2, 'TA' = 3, 'Gd' = 4, 'Ex' = 5)
all_test$PoolQC<- revalue(all_test$PoolQC, Qualities)
table(all_test$PoolQC)
all_test$MiscFeature <- addLevel(all_test$MiscFeature, "None")
all_test$MiscFeature <- ifelse(is.na(all_test$MiscFeature), "None", paste(all_test$MiscFeature))
all_test$MiscFeature <- as.factor(all_test$MiscFeature)
table(all_test$MiscFeature)
all_test$Alley <- addLevel(all_test$Alley, "None")
all_test$Alley <- ifelse(is.na(all_test$Alley), "None", paste(all$Alley))
all_test$Alley <- as.factor(all_test$Alley)
table(all_test$Alley)
all_test$Fence <- addLevel(all_test$Fence, "None")
all_test$Fence <- ifelse(is.na(all$Fence), "None", paste(all_test$Fence))
all_test$Fence <- as.factor(all_test$Fence)
table(all_test$Fence)
all_test$FireplaceQu <- addLevel(all_test$FireplaceQu, "None")
all_test$FireplaceQu <- ifelse(!is.na(all_test$FireplaceQu), paste(all_test$FireplaceQu), "None")
all_test$FireplaceQu <- as.factor(all_test$FireplaceQu)
#GarageYrBlt/GarageFinish/GarageCars/GarageArea/GarageQual/GarageCond
all_test$GarageType <- addLevel(all_test$GarageType, "None")
all_test$GarageType <- ifelse(is.na(all_test$GarageType), "None", paste(all_test$GarageType))
all_test$GarageType <- as.factor(all_test$GarageType)
table(all_test$GarageType)
all_test$GarageYrBlt[is.na(all_test$GarageYrBlt)] <- 'No Garage'
str(all$GarageYrBlt)
all_test$GarageFinish <- addLevel(all_test$GarageFinish, "None")
all_test$GarageFinish <- ifelse(is.na(all_test$GarageFinish), "None", paste(all_test$GarageFinish))
all_test$GarageFinish <- as.factor(all_test$GarageFinish)
table(all_test$GarageFinish)
all_test$GarageCars[is.na(all_test$GarageCars)] <- 'No Garage'
all_test$GarageCars <- as.factor(all_test$GarageCars)
table(all_test$GarageCars)
all_test$GarageArea[is.na(all_test$GarageArea)] <- 'No Garage'
table(all_test$GarageArea)
all_test$GarageQual <- addLevel(all_test$GarageQual, "None")
all_test$GarageQual <- ifelse(is.na(all_test$GarageQual), "None", paste(all_test$GarageQual))
all_test$GarageQual <- as.factor(all_test$GarageQual)
table(all_test$GarageQual)
all_test$GarageCond <- addLevel(all_test$GarageCond, "None")
all_test$GarageCond <- ifelse(is.na(all_test$GarageCond), "None", paste(all_test$GarageCond))
all_test$GarageCond <- as.factor(all_test$GarageCond)
table(all_test$GarageCond)
#BsmtExposure: Refers to walkout or garden level walls (**smae for BsmtFinType1/BsmtFinSF1/BsmtFinType2/BsmtFinSF2/BsmtUnfSF/BsmtQual)
all_test$BsmtQual <- addLevel(all_test$BsmtQual, "None")
all_test$BsmtQual <- ifelse(is.na(all_test$BsmtQual), "None", paste(all_test$BsmtQual))
all_test$BsmtQual <- as.factor(all_test$BsmtQual)
table(all_test$BsmtQual)
all_test$BsmtExposure <- addLevel(all_test$BsmtExposure, "None")
all_test$BsmtExposure <- ifelse(is.na(all_test$BsmtExposure), "None", paste(all_test$BsmtExposure))
all_test$BsmtExposure <- as.factor(all_test$BsmtExposure)
table(all_test$BsmtExposure)
all_test$BsmtFinType1 <- addLevel(all_test$BsmtFinType1, "None")
all_test$BsmtFinType1 <- ifelse(is.na(all_test$BsmtFinType1), "None", paste(all_test$BsmtFinType1))
all_test$BsmtFinType1 <- as.factor(all_test$BsmtFinType1)
str(all_test$BsmtFinType1)
all_test$BsmtCond <- addLevel(all_test$BsmtCond, "None")
all_test$BsmtCond <- ifelse(is.na(all_test$BsmtCond), "None", paste(all_test$BsmtCond))
all_test$BsmtCond <- as.factor(all_test$BsmtCond)
table(all_test$BsmtCond)
all_test$BsmtFinType2 <- addLevel(all_test$BsmtFinType2, "None")
all_test$BsmtFinType2 <- ifelse(is.na(all_test$BsmtFinType2), "None", paste(all_test$BsmtFinType2))
all_test$BsmtFinType2 <- as.factor(all_test$BsmtFinType2)
table(all_test$BsmtFinType2)
all_test$BsmtFinSF1[is.na(all_test$BsmtFinSF1)] <-0
all_test$BsmtFinSF2[is.na(all_test$BsmtFinSF2)] <-0
all_test$BsmtUnfSF[is.na(all_test$BsmtUnfSF)] <-0
all_test$LotFrontage[is.na(all_test$LotFrontage)] <-0
table(all_test$LotFrontage)
drop.na.columns <- c( "MasVnrType","LotFrontage")
all_test<- all_test[ , !(names(all_test) %in% drop.na.columns)]
all_test <- na.omit(all_test)
# Neighborhood
train <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Src/New_Data.csv")
train <- na.omit(train)
df <- data.frame(tapply(train$SalePrice, train$Neighborhood, mean))
library(data.table)
setDT(df, keep.rownames = TRUE)[]
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) + geom_col(aes(fill = df$rn))
numericVars <- which(sapply(train, is.numeric)) #index vector numeric variables
factorVars <- which(sapply(train, is.factor)) #index vector factor variables
cat('There are', length(numericVars), 'numeric variables, and', length(factorVars), 'categoric variables')
set.seed(123)
rf <- randomForest(SalePrice ~ . - SalePrice, data = train, importance = TRUE)
View(train)
quick_RF <- randomForest(x=train[, -79], y=train$SalePrice, ntree=200,importance=TRUE)
str(train)
str(all$GarageYrBlt)
all_test$GarageYrBlt[is.na(all_test$GarageYrBlt)] <- 'No Garage'
str(all$GarageYrBlt)
all$GarageYrBlt <- as.numeric(all$GarageYrBlt)
all <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Data/Raw//train.csv")
na_count <-sapply(all, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
all_test <- all
levels(all_test$PoolQC)
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
all_test$PoolQC <- addLevel(all_test$PoolQC, "None")
all_test$PoolQC <- addLevel(all_test$PoolQC, "Po")
all_test$PoolQC <- addLevel(all_test$PoolQC, "TA")
all_test$PoolQC <- ifelse(is.na(all$PoolQC), "None", paste(all$PoolQC))
Qualities <- c('None' = 0, 'Po' = 1, 'Fa' = 2, 'TA' = 3, 'Gd' = 4, 'Ex' = 5)
all_test$PoolQC<- revalue(all_test$PoolQC, Qualities)
table(all_test$PoolQC)
all_test$MiscFeature <- addLevel(all_test$MiscFeature, "None")
all_test$MiscFeature <- ifelse(is.na(all_test$MiscFeature), "None", paste(all_test$MiscFeature))
all_test$MiscFeature <- as.factor(all_test$MiscFeature)
table(all_test$MiscFeature)
all_test$Alley <- addLevel(all_test$Alley, "None")
all_test$Alley <- ifelse(is.na(all_test$Alley), "None", paste(all$Alley))
all_test$Alley <- as.factor(all_test$Alley)
table(all_test$Alley)
all_test$Fence <- addLevel(all_test$Fence, "None")
all_test$Fence <- ifelse(is.na(all$Fence), "None", paste(all_test$Fence))
all_test$Fence <- as.factor(all_test$Fence)
table(all_test$Fence)
all_test$FireplaceQu <- addLevel(all_test$FireplaceQu, "None")
all_test$FireplaceQu <- ifelse(!is.na(all_test$FireplaceQu), paste(all_test$FireplaceQu), "None")
all_test$FireplaceQu <- as.factor(all_test$FireplaceQu)
#GarageYrBlt/GarageFinish/GarageCars/GarageArea/GarageQual/GarageCond
all_test$GarageType <- addLevel(all_test$GarageType, "None")
all_test$GarageType <- ifelse(is.na(all_test$GarageType), "None", paste(all_test$GarageType))
all_test$GarageType <- as.factor(all_test$GarageType)
table(all_test$GarageType)
all_test$GarageYrBlt[is.na(all_test$GarageYrBlt)] <- 'No Garage'
all$GarageYrBlt <- as.numeric(all$GarageYrBlt)
all_test$GarageFinish <- addLevel(all_test$GarageFinish, "None")
all_test$GarageFinish <- ifelse(is.na(all_test$GarageFinish), "None", paste(all_test$GarageFinish))
all_test$GarageFinish <- as.factor(all_test$GarageFinish)
table(all_test$GarageFinish)
all_test$GarageCars[is.na(all_test$GarageCars)] <- 'No Garage'
all_test$GarageCars <- as.factor(all_test$GarageCars)
table(all_test$GarageCars)
all_test$GarageArea[is.na(all_test$GarageArea)] <- 'No Garage'
table(all_test$GarageArea)
all_test$GarageQual <- addLevel(all_test$GarageQual, "None")
all_test$GarageQual <- ifelse(is.na(all_test$GarageQual), "None", paste(all_test$GarageQual))
all_test$GarageQual <- as.factor(all_test$GarageQual)
table(all_test$GarageQual)
all_test$GarageCond <- addLevel(all_test$GarageCond, "None")
all_test$GarageCond <- ifelse(is.na(all_test$GarageCond), "None", paste(all_test$GarageCond))
all_test$GarageCond <- as.factor(all_test$GarageCond)
table(all_test$GarageCond)
#BsmtExposure: Refers to walkout or garden level walls (**smae for BsmtFinType1/BsmtFinSF1/BsmtFinType2/BsmtFinSF2/BsmtUnfSF/BsmtQual)
all_test$BsmtQual <- addLevel(all_test$BsmtQual, "None")
all_test$BsmtQual <- ifelse(is.na(all_test$BsmtQual), "None", paste(all_test$BsmtQual))
all_test$BsmtQual <- as.factor(all_test$BsmtQual)
table(all_test$BsmtQual)
all_test$BsmtExposure <- addLevel(all_test$BsmtExposure, "None")
all_test$BsmtExposure <- ifelse(is.na(all_test$BsmtExposure), "None", paste(all_test$BsmtExposure))
all_test$BsmtExposure <- as.factor(all_test$BsmtExposure)
table(all_test$BsmtExposure)
all_test$BsmtFinType1 <- addLevel(all_test$BsmtFinType1, "None")
all_test$BsmtFinType1 <- ifelse(is.na(all_test$BsmtFinType1), "None", paste(all_test$BsmtFinType1))
all_test$BsmtFinType1 <- as.factor(all_test$BsmtFinType1)
str(all_test$BsmtFinType1)
all_test$BsmtCond <- addLevel(all_test$BsmtCond, "None")
all_test$BsmtCond <- ifelse(is.na(all_test$BsmtCond), "None", paste(all_test$BsmtCond))
all_test$BsmtCond <- as.factor(all_test$BsmtCond)
table(all_test$BsmtCond)
all_test$BsmtFinType2 <- addLevel(all_test$BsmtFinType2, "None")
all_test$BsmtFinType2 <- ifelse(is.na(all_test$BsmtFinType2), "None", paste(all_test$BsmtFinType2))
all_test$BsmtFinType2 <- as.factor(all_test$BsmtFinType2)
table(all_test$BsmtFinType2)
all_test$BsmtFinSF1[is.na(all_test$BsmtFinSF1)] <-0
all_test$BsmtFinSF2[is.na(all_test$BsmtFinSF2)] <-0
all_test$BsmtUnfSF[is.na(all_test$BsmtUnfSF)] <-0
all_test$LotFrontage[is.na(all_test$LotFrontage)] <-0
table(all_test$LotFrontage)
drop.na.columns <- c( "MasVnrType","LotFrontage")
all_test<- all_test[ , !(names(all_test) %in% drop.na.columns)]
all_test <- na.omit(all_test)
all <- all_test
all$Foundation <- as.factor(all$Foundation)
table(all$Foundation)
all$Heating <- as.factor(all$Heating)
all$RoofStyle <- as.factor(all$RoofStyle)
all$RoofMatl <- as.factor(all$RoofMatl)
all$LandContour <- as.factor(all$LandContour)
all$BldgType <- as.factor(all$BldgType)
all$HouseStyle <- as.factor(all$HouseStyle)
all$Condition1 <- as.factor(all$Condition1)
all$Condition2 <- as.factor(all$Condition2)
all$GarageArea <- as.numeric(all$GarageArea)
all$MoSold <- as.factor(all$MoSold)
all$MSSubClass <- as.factor(all$MSSubClass)
na_count_test <-sapply(all, function(y) sum(length(which(is.na(y)))))
na_count_test <- data.frame(na_count_test)
write_excel_csv(all, "New_Data.csv")
train <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Src/New_Data.csv")
train <- na.omit(train)
str(train)
train$GarageYrBlt
train$GarageYrBlt <- as.integer(train$GarageYrBlt)
str(train)
# Neighborhood
train <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Src/New_Data.csv")
train <- na.omit(train)
train$GarageYrBlt <- as.integer(train$GarageYrBlt)
df <- data.frame(tapply(train$SalePrice, train$Neighborhood, mean))
library(data.table)
setDT(df, keep.rownames = TRUE)[]
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) + geom_col(aes(fill = df$rn))
numericVars <- which(sapply(train, is.numeric)) #index vector numeric variables
factorVars <- which(sapply(train, is.factor)) #index vector factor variables
cat('There are', length(numericVars), 'numeric variables, and', length(factorVars), 'categoric variables')
set.seed(123)
rf <- randomForest(SalePrice ~ . - SalePrice, data = train, importance = TRUE)
rf
varImpPlot(rf)
set.seed(123)
quick_RF <- randomForest(x=train[, -79], y=train$SalePrice, ntree=100,importance=TRUE)
imp_RF <- importance(quick_RF)
imp_DF <- data.frame(Variables = row.names(imp_RF), MSE = imp_RF[,1])
imp_DF <- imp_DF[order(imp_DF$MSE, decreasing = TRUE),]
ggplot(imp_DF[1:20,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= '% increase MSE if variable is randomly permuted') + coord_flip() + theme(legend.position="none")
all_numVar <- train[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
cor_numVar
as.matrix(cor_numVar)
cor_numVardf <- as.matrix(cor_numVar)
View(cor_numVardf)
View(cor_numVar)
all_numVar <- train[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
all_numVar <- train[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
df <- data.frame(tapply(train$SalePrice, train$Neighborhood, mean))
library(data.table)
setDT(df, keep.rownames = TRUE)[]
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) + geom_col(aes(fill = df$rn))
View(df)
median(train$SalePrice)
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) +
geom_col(aes(fill = df$rn))+
geom_hline(yintercept=162500, linetype="dashed", color = "red")
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) +
geom_col(aes(fill = df$rn))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")
ggplot(data=train, aes(x=Neighborhood)) +
geom_histogram(stat='count')+
geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) +
geom_col(aes(fill = df$rn))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) +
geom_col(aes(fill = df$rn))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$rn, y= df$tapply.train.SalePrice..train.Neighborhood..mean.)) +
geom_col(aes(fill = df$rn))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
names(df$tapply.train.SalePrice..train.Neighborhood..mean.) <- 'Average SalePrice'
colnames(df$tapply.train.SalePrice..train.Neighborhood..mean.) <- 'Average SalePrice'
colnames(df) <- c('Neighborhood','Average SalePrice')
View(df)
ggplot(df, aes(x = df$rn, y= df)) +
geom_col(aes(fill = df$rn))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$rn))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_label(stat = "Neighborhood", aes(label = Average Sale Price, y = Average Sale Price), size=3) +
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_label(stat = "Neighborhood", aes(label = Average_SalePrice, y = Average_SalePrice), size=3) +
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_label(aes(label = Average_SalePrice, y = Average_SalePrice), size=3) +
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_label(aes(x = Neighborhood, y = Average_SalePrice), size=3) +
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_label(aes(x = Neighborhood, y = `Average SalePrice`), size=3) +
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = df$Neighborhood, y= df$`Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_label(aes(label = `Average SalePrice`, y = `Average SalePrice`), size=3) +
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = Neighborhood, y= `Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=train, aes(x=Neighborhood)) +
geom_histogram(stat='count')+
geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
set.seed(12345)
in_train <- createDataPartition(y = train$SalePrice, p = 3 / 4, list = FALSE)
str(in_train)
training <- train[ in_train, ] # three fourth of data go to training
testing  <- train[-in_train, ]
library(rJava)
library(bartMachine)
set_bart_machine_num_cores(parallel::detectCores())
bart <- bartMachine(X = training[,-79], y = training$SalePrice)
bart
predictions <- predict(bart, new_data = testing[,-79], type = "class")
table(testing$SalePrice, predictions)
set.seed(1234)
my_control <-trainControl(method="cv", number=5)
lassoGrid <- expand.grid(alpha = 1, lambda = seq(0.001,0.1,by = 0.0005))
lasso_mod <- train(x=training[,-79], y=training$SalePrice, method='glmnet', trControl= my_control, tuneGrid=lassoGrid)
ols <- lm(SalePrice ~ . - SalePrice, data = training)
summary(ols)
View(training)
training$GrLivArea
ols_AIC <- step(ols, trace = FALSE)
setdiff(names(coef(ols)), names(coef(ols_AIC)))
setdiff(names(coef(ols)), names(coef(ols_AIC)))
SSE_AIC <- mean( (testing$SalePrice - yhat_AIC) ^ 2 )
yhat_AIC <- predict(ols_AIC, newdata = testing)
SSE_AIC <- mean( (testing$SalePrice - yhat_AIC) ^ 2 )
yhat_AIC <- predict(ols_AIC, newdata = testing)
X <- model.matrix(ols)[ ,-79]
y <- training$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
library(lasso)
library(caret)
library(glmnet)
X <- model.matrix(ols)[ ,-79]
y <- training$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
library(lars)
X <- model.matrix(ols)[ ,-79]
y <- training$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(ols, data = testing)[ ,-79]
yhat_lasso <- predict(lasso, newx = test_X)$fit
SSE_lasso <- colMeans( (testing$SalePrice - yhat_lasso) ^ 2 )
min(SSE_lasso)
which(coef(lasso, s = which.min(SSE_lasso)) == 0)
training$Condition2
str(training$Condition2)
levels(training$Condition2)
test_X <- model.matrix(ols, data = testing)[ ,-79]
training$Condition2 <- NULL
test_X <- model.matrix(ols, data = testing)[ ,-79]
ols <- lm(SalePrice ~ . - SalePrice, data = training)
X <- model.matrix(ols)[ ,-79]
y <- training$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(ols, data = testing)[ ,-79]
set.seed(1234)
my_control <-trainControl(method="cv", number=5)
lassoGrid <- expand.grid(alpha = 1, lambda = seq(0.001,0.1,by = 0.0005))
lasso_mod <- train(x=training[, -79], y=training$SalePrice[!is.na(training$SalePrice)], method='glmnet', trControl= my_control, tuneGrid=lassoGrid)
lasso_mod$bestTune
lasso_mod <- train(x=training[, -79], y=training$SalePrice[!is.na(training$SalePrice)], method='glmnet')
library(lars)
ols <- lm(SalePrice ~ . - SalePrice, data = training)
X <- model.matrix(ols)[ ,-79]
y <- training$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(ols, data = testing)[ ,-79]
yhat_lasso <- predict(lasso, newx = test_X)$fit
SSE_lasso <- colMeans( (testing$SalePrice - yhat_lasso) ^ 2 )
min(SSE_lasso)
which(coef(lasso, s = which.min(SSE_lasso)) == 0)
