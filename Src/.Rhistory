str(in_train)
training <- train[ in_train, ] # three fourth of data go to training
testing  <- train[-in_train, ]
train <- train[-c(524, 1299, 2550),]
numericVars <- which(sapply(train, is.numeric)) #index vector numeric variables
numericVarNames <- numericVarNames[!(numericVarNames %in% c('MSSubClass', 'MoSold', 'YrSold', 'SalePrice', 'OverallQual', 'OverallCond'))]
is.numeric(train)
numericVars
names(numericVars)
print(names(numericVars))
testll <- merge(training, testing)
View(testll)
,
testll <- merge(training, testing)
View(train)
numericVarNames <-  c('MSSubClass', 'MoSold', 'YrSold', 'SalePrice', 'OverallQual', 'OverallCond', 'Age', 'TotalPorchSF', 'TotBathrooms', 'TotalSqFeet')
DFnumeric <- train[, names(train) %in% numericVarNames]
View(DFnumeric)
train$MoSold
numericVarNames <-  c('MSSubClass', 'MoSold', 'YrSold', 'SalePrice', 'OverallQual', 'OverallCond', 'Age', 'TotalPorchSF', 'TotBathrooms', 'TotalSqFeet')
DFnumeric <- train[, names(train) %in% numericVarNames]
train$TotalSqFeet
str(train$PoolQC)
all_test$PoolQC <- as.factor(all_test$PoolQC)
all_test <- all
levels(all_test$PoolQC)
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
all_test$PoolQC <- addLevel(all_test$PoolQC, "None")
all_test$PoolQC <- addLevel(all_test$PoolQC, "Po")
all_test$PoolQC <- addLevel(all_test$PoolQC, "TA")
all_test$PoolQC <- ifelse(is.na(all$PoolQC), "None", paste(all$PoolQC))
Qualities <- c('None' = 0, 'Po' = 1, 'Fa' = 2, 'TA' = 3, 'Gd' = 4, 'Ex' = 5)
all_test$PoolQC<- revalue(all_test$PoolQC, Qualities)
all_test$PoolQC <- as.factor(all_test$PoolQC)
all_test$OverallQual <- as.factor(all_test$OverallQual)
all_test$YearBuilt <- as.factor(all_test$YearBuilt)
str(all_test$YearBuilt)
numericVarNames <-  c('MSSubClass', 'MoSold', 'YrSold', 'SalePrice', 'OverallQual', 'OverallCond', 'Age', 'TotalPorchSF', 'TotBathrooms', 'TotalSqFeet')
DFnumeric <- train[, names(train) %in% numericVarNames]
sapply(train, is.factor)
which(sapply(train, is.factor))
namefactor <- which(sapply(train, is.factor))
namefactor <- which(sapply(train, is.factor))
DFfactors <- train[, !(names(train) %in% namefactor)]
DFfactors <- DFfactors[, names(DFfactors) != 'SalePrice']
View(DFfactors)
DFdummies <- as.data.frame(model.matrix(~.-1, DFfactors))
dim(DFdummies)
all <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Data/Raw//train.csv")
set.seed(12345)
in_train <- createDataPartition(y = all$SalePrice, p = 3 / 4, list = FALSE)
str(in_train)
training <- all[ in_train, ] # three fourth of data go to training
testing  <- all[-in_train, ]
all <- rbind(training, testing)
all <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Data/Raw//train.csv")
set.seed(12345)
in_train <- createDataPartition(y = all$SalePrice, p = 3 / 4, list = FALSE)
str(in_train)
training <- all[ in_train, ] # three fourth of data go to training
testing  <- all[-in_train, ]
all <- rbind(training, testing)
View(all)
hist(all$SalePrice, breaks=seq(30000, 760000, 500),prob=TRUE )
lines(density(all$SalePrice), col="blue", lwd=2)
lines(density(all$SalePrice, adjust=2), lty="dotted")
summary(all$SalePrice)
# SalePrice does not have a standard normal distribution, it is right skewed
# Log the SalePrice, the distribution of log(SalePrice) looks like a normal distribution
log_saleprice <- log(all$SalePrice)
hist(log_saleprice, breaks=seq(10, 14, 0.025),prob=TRUE )
lines(density(log_saleprice), col="blue", lwd=2)
all$Id <- rownames(all)
numericVars <- which(sapply(all, is.numeric))
numericVarNames <- names(numericVars)
length(numericVars)
all_numVar <- all[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs") #correlations of all numeric variables
#sort on decreasing correlations with SalePrice
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
ggplot(data=all[!is.na(all$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot() + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=GrLivArea, y=SalePrice))+
geom_point(col='black') + geom_smooth(method = "lm", se=FALSE, color="blue", aes(group=1)) +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
outlier1 <- all%>% filter(GrLivArea > 4500)
outlier1$Id
all[c(524, 1299, 2550), c('SalePrice', 'GrLivArea', 'OverallQual')]
summary(all$GarageCars)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=factor(GarageCars), y=SalePrice))+
geom_boxplot() + labs(x='Size of Garage/car') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
outlier2 <- all %>%
filter(GarageCars == 3)%>%
filter(SalePrice > 700000)
outlier2$Id
all[c(524, 1299, 692, 1183), c('SalePrice', 'GrLivArea', 'OverallQual','GarageCars')]
all_test <- all
levels(all_test$PoolQC)
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
all_test$PoolQC <- addLevel(all_test$PoolQC, "None")
all_test$PoolQC <- addLevel(all_test$PoolQC, "Po")
all_test$PoolQC <- addLevel(all_test$PoolQC, "TA")
all_test$PoolQC <- ifelse(is.na(all$PoolQC), "None", paste(all$PoolQC))
Qualities <- c('None' = 0, 'Po' = 1, 'Fa' = 2, 'TA' = 3, 'Gd' = 4, 'Ex' = 5)
all_test$PoolQC<- revalue(all_test$PoolQC, Qualities)
all_test$PoolQC <- as.factor(all_test$PoolQC)
all_test$MiscFeature <- addLevel(all_test$MiscFeature, "None")
all_test$MiscFeature <- ifelse(is.na(all_test$MiscFeature), "None", paste(all_test$MiscFeature))
all_test$MiscFeature <- as.factor(all_test$MiscFeature)
table(all_test$MiscFeature)
all_test$Alley <- addLevel(all_test$Alley, "None")
all_test$Alley <- ifelse(is.na(all_test$Alley), "None", paste(all$Alley))
all_test$Alley <- as.factor(all_test$Alley)
table(all_test$Alley)
all_test$Fence <- addLevel(all_test$Fence, "None")
all_test$Fence <- ifelse(is.na(all$Fence), "None", paste(all_test$Fence))
all_test$Fence <- as.factor(all_test$Fence)
table(all_test$Fence)
all_test$FireplaceQu <- addLevel(all_test$FireplaceQu, "None")
all_test$FireplaceQu <- ifelse(!is.na(all_test$FireplaceQu), paste(all_test$FireplaceQu), "None")
all_test$FireplaceQu <- as.factor(all_test$FireplaceQu)
#GarageYrBlt/GarageFinish/GarageCars/GarageArea/GarageQual/GarageCond
all_test$GarageType <- addLevel(all_test$GarageType, "None")
all_test$GarageType <- ifelse(is.na(all_test$GarageType), "None", paste(all_test$GarageType))
all_test$GarageType <- as.factor(all_test$GarageType)
table(all_test$GarageType)
all_test$GarageYrBlt[is.na(all_test$GarageYrBlt)] <- 'No Garage'
all$GarageYrBlt <- as.numeric(all$GarageYrBlt)
all_test$GarageFinish <- addLevel(all_test$GarageFinish, "None")
all_test$GarageFinish <- ifelse(is.na(all_test$GarageFinish), "None", paste(all_test$GarageFinish))
all_test$GarageFinish <- as.factor(all_test$GarageFinish)
table(all_test$GarageFinish)
all_test$GarageCars[is.na(all_test$GarageCars)] <- 'No Garage'
all_test$GarageCars <- as.factor(all_test$GarageCars)
table(all_test$GarageCars)
all_test$GarageArea[is.na(all_test$GarageArea)] <- 'No Garage'
table(all_test$GarageArea)
all_test$GarageQual <- addLevel(all_test$GarageQual, "None")
all_test$GarageQual <- ifelse(is.na(all_test$GarageQual), "None", paste(all_test$GarageQual))
all_test$GarageQual <- as.factor(all_test$GarageQual)
table(all_test$GarageQual)
all_test$GarageCond <- addLevel(all_test$GarageCond, "None")
all_test$GarageCond <- ifelse(is.na(all_test$GarageCond), "None", paste(all_test$GarageCond))
all_test$GarageCond <- as.factor(all_test$GarageCond)
table(all_test$GarageCond)
#BsmtExposure: Refers to walkout or garden level walls (**smae for BsmtFinType1/BsmtFinSF1/BsmtFinType2/BsmtFinSF2/BsmtUnfSF/BsmtQual)
all_test$BsmtQual <- addLevel(all_test$BsmtQual, "None")
all_test$BsmtQual <- ifelse(is.na(all_test$BsmtQual), "None", paste(all_test$BsmtQual))
all_test$BsmtQual <- as.factor(all_test$BsmtQual)
table(all_test$BsmtQual)
all_test$BsmtExposure <- addLevel(all_test$BsmtExposure, "None")
all_test$BsmtExposure <- ifelse(is.na(all_test$BsmtExposure), "None", paste(all_test$BsmtExposure))
all_test$BsmtExposure <- as.factor(all_test$BsmtExposure)
table(all_test$BsmtExposure)
all_test$BsmtFinType1 <- addLevel(all_test$BsmtFinType1, "None")
all_test$BsmtFinType1 <- ifelse(is.na(all_test$BsmtFinType1), "None", paste(all_test$BsmtFinType1))
all_test$BsmtFinType1 <- as.factor(all_test$BsmtFinType1)
str(all_test$BsmtFinType1)
all_test$BsmtCond <- addLevel(all_test$BsmtCond, "None")
all_test$BsmtCond <- ifelse(is.na(all_test$BsmtCond), "None", paste(all_test$BsmtCond))
all_test$BsmtCond <- as.factor(all_test$BsmtCond)
table(all_test$BsmtCond)
all_test$BsmtFinType2 <- addLevel(all_test$BsmtFinType2, "None")
all_test$BsmtFinType2 <- ifelse(is.na(all_test$BsmtFinType2), "None", paste(all_test$BsmtFinType2))
all_test$BsmtFinType2 <- as.factor(all_test$BsmtFinType2)
table(all_test$BsmtFinType2)
all_test$BsmtFinSF1[is.na(all_test$BsmtFinSF1)] <-0
all_test$BsmtFinSF2[is.na(all_test$BsmtFinSF2)] <-0
all_test$BsmtUnfSF[is.na(all_test$BsmtUnfSF)] <-0
all_test$LotFrontage[is.na(all_test$LotFrontage)] <-0
table(all_test$LotFrontage)
drop.na.columns <- c( "MasVnrType","LotFrontage")
all_test<- all_test[ , !(names(all_test) %in% drop.na.columns)]
all_test <- na.omit(all_test)
# Neighborhood
train <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Src/New_Data.csv")
train <- na.omit(train)
train$GarageYrBlt <- as.integer(train$GarageYrBlt)
numericVars <- which(sapply(train, is.numeric)) #index vector numeric variables
factorVars <- which(sapply(train, is.factor)) #index vector factor variables
cat('There are', length(numericVars), 'numeric variables, and', length(factorVars), 'categoric variables')
set.seed(123)
quick_RF <- randomForest(x=train[, -79], y=train$SalePrice, ntree=100,importance=TRUE)
imp_RF <- importance(quick_RF)
imp_DF <- data.frame(Variables = row.names(imp_RF), MSE = imp_RF[,1])
imp_DF <- imp_DF[order(imp_DF$MSE, decreasing = TRUE),]
ggplot(imp_DF[1:20,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= '% increase MSE if variable is randomly permuted') + coord_flip() + theme(legend.position="none")
all_numVar <- train[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
dropVars <- c('YearRemodAdd', 'GarageArea', 'TotalBsmtSF', 'TotalRmsAbvGrd')
train <- train[,!(names(train) %in% dropVars)]
train <- train[-c(524, 1299, 2550),]
write_csv(train, 'Final_data.csv')
df <- data.frame(tapply(train$SalePrice, train$Neighborhood, mean))
library(data.table)
setDT(df, keep.rownames = TRUE)[]
colnames(df) <- c('Neighborhood','Average SalePrice')
ggplot(df, aes(x = Neighborhood, y= `Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=train, aes(x=Neighborhood)) +
geom_histogram(stat='count')+
geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dropVars <- c('YearRemodAdd', 'GarageArea', 'TotalBsmtSF', 'TotalRmsAbvGrd')
train <- train[,!(names(train) %in% dropVars)]
train <- train[-c(524, 1299, 2550),]
write_csv(train, 'Final_data.csv')
View(train)
ZerocolTest <- which(colSums(DFdummies[1092:1447,])==0)
colnames(DFdummies[ZerocolTest])
DFdummies <- DFdummies[,-ZerocolTest]
ZerocolTrain <- which(colSums(DFdummies[1:1091,])==0)
colnames(DFdummies[ZerocolTrain])
DFdummies <- DFdummies[,-ZerocolTrain]
View(DFdummies)
library(lars)
ols <- lm(SalePrice ~ . - SalePrice, data = training)
X <- model.matrix(ols)[ ,-79]
y <- training$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(ols, data = testing)[ ,-79]
yhat_lasso <- predict(lasso, newx = test_X)$fit
SSE_lasso <- colMeans( (testing$SalePrice - yhat_lasso) ^ 2 )
min(SSE_lasso)
which(coef(lasso, s = which.min(SSE_lasso)) == 0)
train1 <- combined[1:1092,]
test1 <- combined[1092:1447,]
train1 <- train[1:1092,]
test1 <- train[1092:1447,]
library(lars)
ols <- lm(SalePrice ~ . - SalePrice, data = train1)
ols <- lm(SalePrice ~ . - SalePrice, data = train1)
X <- model.matrix(ols)[ ,-76]
y <- train1$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(ols, data = test1)[ ,-76]
yhat_lasso <- predict(lasso, newx = test_X)$fit
SSE_lasso <- colMeans( (test1$SalePrice - yhat_lasso) ^ 2 )
library(glmnet)
library(purrr)
library(tidyr)
library(readr)
library(corrplot)
library(shiny)
library(dplyr)
library(ggplot2)
library(e1071)
library(glmnet)
library(mice)
library(lattice)
library(VIM)
library(caret)
library(stargazer)
library(gam)
library(flam)
library(bartMachine)
library(tree)
library(ISLR)
library(RColorBrewer)
library(ggfortify)
library(scales)
library(stargazer)
library(rsconnect)
library(knitr)
library(gridExtra)
library(scales)
library(Rmisc)
library(ggrepel)
library(randomForest)
library(psych)
library(purrr)
library(tidyr)
library(ggplot2)
library(readr)
library(dplyr)
library(corrplot)
library(RColorBrewer)
library(shiny)
library(ggfortify)
library(pander)
all <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Data/Raw//train.csv")
set.seed(12345)
in_train <- createDataPartition(y = all$SalePrice, p = 3 / 4, list = FALSE)
str(in_train)
training <- all[ in_train, ] # three fourth of data go to training
testing  <- all[-in_train, ]
all <- rbind(training, testing)
all_test <- all
levels(all_test$PoolQC)
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
all_test$PoolQC <- addLevel(all_test$PoolQC, "None")
all_test$PoolQC <- addLevel(all_test$PoolQC, "Po")
all_test$PoolQC <- addLevel(all_test$PoolQC, "TA")
all_test$PoolQC <- ifelse(is.na(all$PoolQC), "None", paste(all$PoolQC))
Qualities <- c('None' = 0, 'Po' = 1, 'Fa' = 2, 'TA' = 3, 'Gd' = 4, 'Ex' = 5)
all_test$PoolQC<- revalue(all_test$PoolQC, Qualities)
all_test$PoolQC <- as.factor(all_test$PoolQC)
all_test$MiscFeature <- addLevel(all_test$MiscFeature, "None")
all_test$MiscFeature <- ifelse(is.na(all_test$MiscFeature), "None", paste(all_test$MiscFeature))
all_test$MiscFeature <- as.factor(all_test$MiscFeature)
table(all_test$MiscFeature)
all_test$Alley <- addLevel(all_test$Alley, "None")
all_test$Alley <- ifelse(is.na(all_test$Alley), "None", paste(all$Alley))
all_test$Alley <- as.factor(all_test$Alley)
table(all_test$Alley)
all_test$Fence <- addLevel(all_test$Fence, "None")
all_test$Fence <- ifelse(is.na(all$Fence), "None", paste(all_test$Fence))
all_test$Fence <- as.factor(all_test$Fence)
table(all_test$Fence)
all_test$FireplaceQu <- addLevel(all_test$FireplaceQu, "None")
all_test$FireplaceQu <- ifelse(!is.na(all_test$FireplaceQu), paste(all_test$FireplaceQu), "None")
all_test$FireplaceQu <- as.factor(all_test$FireplaceQu)
#GarageYrBlt/GarageFinish/GarageCars/GarageArea/GarageQual/GarageCond
all_test$GarageType <- addLevel(all_test$GarageType, "None")
all_test$GarageType <- ifelse(is.na(all_test$GarageType), "None", paste(all_test$GarageType))
all_test$GarageType <- as.factor(all_test$GarageType)
table(all_test$GarageType)
all_test$GarageYrBlt[is.na(all_test$GarageYrBlt)] <- 'No Garage'
all$GarageYrBlt <- as.numeric(all$GarageYrBlt)
all_test$GarageFinish <- addLevel(all_test$GarageFinish, "None")
all_test$GarageFinish <- ifelse(is.na(all_test$GarageFinish), "None", paste(all_test$GarageFinish))
all_test$GarageFinish <- as.factor(all_test$GarageFinish)
table(all_test$GarageFinish)
all_test$GarageCars[is.na(all_test$GarageCars)] <- 'No Garage'
all_test$GarageCars <- as.factor(all_test$GarageCars)
table(all_test$GarageCars)
all_test$GarageArea[is.na(all_test$GarageArea)] <- 'No Garage'
table(all_test$GarageArea)
all_test$GarageQual <- addLevel(all_test$GarageQual, "None")
all_test$GarageQual <- ifelse(is.na(all_test$GarageQual), "None", paste(all_test$GarageQual))
all_test$GarageQual <- as.factor(all_test$GarageQual)
table(all_test$GarageQual)
all_test$GarageCond <- addLevel(all_test$GarageCond, "None")
all_test$GarageCond <- ifelse(is.na(all_test$GarageCond), "None", paste(all_test$GarageCond))
all_test$GarageCond <- as.factor(all_test$GarageCond)
table(all_test$GarageCond)
#BsmtExposure: Refers to walkout or garden level walls (**smae for BsmtFinType1/BsmtFinSF1/BsmtFinType2/BsmtFinSF2/BsmtUnfSF/BsmtQual)
all_test$BsmtQual <- addLevel(all_test$BsmtQual, "None")
all_test$BsmtQual <- ifelse(is.na(all_test$BsmtQual), "None", paste(all_test$BsmtQual))
all_test$BsmtQual <- as.factor(all_test$BsmtQual)
table(all_test$BsmtQual)
all_test$BsmtExposure <- addLevel(all_test$BsmtExposure, "None")
all_test$BsmtExposure <- ifelse(is.na(all_test$BsmtExposure), "None", paste(all_test$BsmtExposure))
all_test$BsmtExposure <- as.factor(all_test$BsmtExposure)
table(all_test$BsmtExposure)
all_test$BsmtFinType1 <- addLevel(all_test$BsmtFinType1, "None")
all_test$BsmtFinType1 <- ifelse(is.na(all_test$BsmtFinType1), "None", paste(all_test$BsmtFinType1))
all_test$BsmtFinType1 <- as.factor(all_test$BsmtFinType1)
str(all_test$BsmtFinType1)
all_test$BsmtCond <- addLevel(all_test$BsmtCond, "None")
all_test$BsmtCond <- ifelse(is.na(all_test$BsmtCond), "None", paste(all_test$BsmtCond))
all_test$BsmtCond <- as.factor(all_test$BsmtCond)
table(all_test$BsmtCond)
all_test$BsmtFinType2 <- addLevel(all_test$BsmtFinType2, "None")
all_test$BsmtFinType2 <- ifelse(is.na(all_test$BsmtFinType2), "None", paste(all_test$BsmtFinType2))
all_test$BsmtFinType2 <- as.factor(all_test$BsmtFinType2)
table(all_test$BsmtFinType2)
all_test$BsmtFinSF1[is.na(all_test$BsmtFinSF1)] <-0
all_test$BsmtFinSF2[is.na(all_test$BsmtFinSF2)] <-0
all_test$BsmtUnfSF[is.na(all_test$BsmtUnfSF)] <-0
all_test$LotFrontage[is.na(all_test$LotFrontage)] <-0
table(all_test$LotFrontage)
drop.na.columns <- c( "MasVnrType","LotFrontage")
all_test<- all_test[ , !(names(all_test) %in% drop.na.columns)]
all_test <- na.omit(all_test)
# Neighborhood
train <- read.csv("/Users/lizhizicui/Desktop/Final-Project---Applied-Data-Science/Src/New_Data.csv")
train <- na.omit(train)
train$GarageYrBlt <- as.integer(train$GarageYrBlt)
numericVars <- which(sapply(train, is.numeric)) #index vector numeric variables
factorVars <- which(sapply(train, is.factor)) #index vector factor variables
cat('There are', length(numericVars), 'numeric variables, and', length(factorVars), 'categoric variables')
set.seed(123)
quick_RF <- randomForest(x=train[, -79], y=train$SalePrice, ntree=100,importance=TRUE)
imp_RF <- importance(quick_RF)
imp_DF <- data.frame(Variables = row.names(imp_RF), MSE = imp_RF[,1])
imp_DF <- imp_DF[order(imp_DF$MSE, decreasing = TRUE),]
ggplot(imp_DF[1:20,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= '% increase MSE if variable is randomly permuted') + coord_flip() + theme(legend.position="none")
all_numVar <- train[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
all_numVar <- train[, numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
dropVars <- c('YearRemodAdd', 'GarageArea', 'TotalBsmtSF', 'TotalRmsAbvGrd')
train <- train[,!(names(train) %in% dropVars)]
train <- train[-c(524, 1299, 2550),]
write_csv(train, 'Final_data.csv')
df <- data.frame(tapply(train$SalePrice, train$Neighborhood, mean))
library(data.table)
setDT(df, keep.rownames = TRUE)[]
colnames(df) <- c('Neighborhood','Average SalePrice')
ggplot(df, aes(x = Neighborhood, y= `Average SalePrice`)) +
geom_col(aes(fill = df$Neighborhood))+
geom_hline(yintercept=median(train$SalePrice), linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=train, aes(x=Neighborhood)) +
geom_histogram(stat='count')+
geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
train1 <- train[1:1092,]
test1 <- train[1092:1447,]
library(lars)
ols <- lm(SalePrice ~ . - SalePrice, data = train1)
X <- model.matrix(ols)[ ,-76]
y <- train1$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(ols, data = test1)[ ,-76]
View(all)
train1 <- train[1:1092,]
test1 <- train[1092:1447,]
library(lars)
ols <- lm(SalePrice ~ . - SalePrice, data = train1)
X <- model.matrix(ols)[ ,-76]
y <- train1$SalePrice
lasso <- lars(X, y, type = "lasso", trace = FALSE)
test_X <- model.matrix(ols, data = test1)[ ,-76]
yhat_lasso <- predict(lasso, newx = test_X)$fit
SSE_lasso <- colMeans( (test1$SalePrice - yhat_lasso) ^ 2 )
min(SSE_lasso)
which(coef(lasso, s = which.min(SSE_lasso)) == 0)
train1
train1$Condition2
levels(train1$Condition2)
levels(test1$Condition2)
test1$Condition2[test1$Condition2=='RRAe']
table(train1$Condition2)
table(test1$Condition2)
rm(list=ls())
#install.packages(c("knitr" ,"purrr", "tidyr", "ggplot2", "readr", "dplyr", "corrplot", "RColorBrewer", "shiny", "ggfortify", "pander","here","glmnet"))
# library(glmnet)
# library(purrr)
# library(tidyr)
# library(corrplot)
# library(shiny)
# library(dplyr)
# library(ggplot2)
# library(e1071)
library(glmnet)
# library(mice)
# library(lattice)
# library(VIM)
# library(caret)
# library(stargazer)
# library(gam)
# library(flam)
#options(java.parameters = "-Xmx5g") #useful when bartmachine breaks because of Java on IOS
# library(bartMachine)
# library(tree)
# library(ISLR)
# library(RColorBrewer)
# library(ggfortify)
# library(scales)
# library(stargazer)
# library(rsconnect)
# library(knitr)
# library(gridExtra)
# library(scales)
# library(Rmisc)
# library(ggrepel)
# library(randomForest)
# library(psych)
library(purrr)
library(tidyr)
library(ggplot2)
library(readr)
library(dplyr)
library(corrplot)
library(RColorBrewer)
library(shiny)
library(ggfortify)
library(pander)
library(here)
